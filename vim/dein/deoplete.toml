[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 10000

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" <BS>: close popup and delete backword char.
inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#cancel_popup() . "\<CR>"
endfunction
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']

#[ruby]----------------------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete-rct'
on_ft = ['ruby']

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_ft = ['ruby']

# Rubyのend補完
[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ["ruby"]

# Rubyのメソッドの定義元にジャンプ
[[plugins]]
repo = 'szw/vim-tags'
on_ft = ["ruby"]
#----------------------------------------------------------------------


#[vue]----------------------------------------------------------
#Vim syntax highlighting for Vue components.
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_post_source='''
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction
'''

[[plugins]]
repo = 'w0rp/ale'
on_source = "LanguageClient-neovim"

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
on_ft = ['rust', 'vue', 'html', 'javascript', 'css']
build = './install.sh'
hook_source = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'vue': ['vls'],
    \ 'html': [],
    \ 'javascript': [],
    \ 'typescript': [],
    \ 'css': [],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''
#----------------------------------------------------------------

#[typescript]----------------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = ['typescript', 'vue']

[[plugins]]
repo = 'mhartington/deoplete-typescript'
on_ft = ['typescript', 'vue']

[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ['typescript', 'vue']
#----------------------------------------------------------------

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh']

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = ['javascript']

# jsonsyntax
[[plugins]]
repo = 'elzr/vim-json'
hook_source='let g:vim_json_syntax_conceal = 0'
on_ft = ['json']
